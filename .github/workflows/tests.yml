name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd mcts-llm-alpha
        pip install -e ".[dev]"
    
    - name: Run linting
      run: |
        cd mcts-llm-alpha
        # Format check
        black --check src tests
        # Import sort check
        isort --check-only src tests
        # Linting
        ruff check src tests
    
    - name: Run type checking
      run: |
        cd mcts-llm-alpha
        mypy src --ignore-missing-imports
    
    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        QLIB_PROVIDER_URI: "mock_data"
      run: |
        cd mcts-llm-alpha
        pytest -v --cov=mcts_llm_alpha --cov-report=xml --cov-report=term tests/
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./mcts-llm-alpha/coverage.xml
        fail_ci_if_error: false
        verbose: true

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install doc dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx_rtd_theme
    
    - name: Build documentation
      run: |
        cd mcts-llm-alpha/docs
        # Create a simple conf.py if not exists
        if [ ! -f conf.py ]; then
          echo "project = 'MCTS-LLM Alpha'" > conf.py
          echo "author = 'dtbtc'" >> conf.py
          echo "extensions = []" >> conf.py
          echo "html_theme = 'sphinx_rtd_theme'" >> conf.py
        fi
        # Build docs
        sphinx-build -b html . _build/html || echo "Documentation build skipped"